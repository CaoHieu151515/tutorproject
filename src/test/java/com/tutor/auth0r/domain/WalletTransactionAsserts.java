package com.tutor.auth0r.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WalletTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWalletTransactionAllPropertiesEquals(WalletTransaction expected, WalletTransaction actual) {
        assertWalletTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertWalletTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWalletTransactionAllUpdatablePropertiesEquals(WalletTransaction expected, WalletTransaction actual) {
        assertWalletTransactionUpdatableFieldsEquals(expected, actual);
        assertWalletTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWalletTransactionAutoGeneratedPropertiesEquals(WalletTransaction expected, WalletTransaction actual) {
        assertThat(expected)
            .as("Verify WalletTransaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWalletTransactionUpdatableFieldsEquals(WalletTransaction expected, WalletTransaction actual) {
        assertThat(expected)
            .as("Verify WalletTransaction relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreateAt()).as("check createAt").isEqualTo(actual.getCreateAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWalletTransactionUpdatableRelationshipsEquals(WalletTransaction expected, WalletTransaction actual) {
        assertThat(expected)
            .as("Verify WalletTransaction relationships")
            .satisfies(e -> assertThat(e.getWallet()).as("check wallet").isEqualTo(actual.getWallet()));
    }
}
