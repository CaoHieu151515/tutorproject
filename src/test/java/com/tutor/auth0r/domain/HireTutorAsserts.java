package com.tutor.auth0r.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HireTutorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHireTutorAllPropertiesEquals(HireTutor expected, HireTutor actual) {
        assertHireTutorAutoGeneratedPropertiesEquals(expected, actual);
        assertHireTutorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHireTutorAllUpdatablePropertiesEquals(HireTutor expected, HireTutor actual) {
        assertHireTutorUpdatableFieldsEquals(expected, actual);
        assertHireTutorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHireTutorAutoGeneratedPropertiesEquals(HireTutor expected, HireTutor actual) {
        assertThat(expected)
            .as("Verify HireTutor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHireTutorUpdatableFieldsEquals(HireTutor expected, HireTutor actual) {
        assertThat(expected)
            .as("Verify HireTutor relevant properties")
            .satisfies(e -> assertThat(e.getTimeHire()).as("check timeHire").isEqualTo(actual.getTimeHire()))
            .satisfies(e -> assertThat(e.getTotalPrice()).as("check totalPrice").isEqualTo(actual.getTotalPrice()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getStartAt()).as("check startAt").isEqualTo(actual.getStartAt()))
            .satisfies(e -> assertThat(e.getEndAt()).as("check endAt").isEqualTo(actual.getEndAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHireTutorUpdatableRelationshipsEquals(HireTutor expected, HireTutor actual) {
        assertThat(expected)
            .as("Verify HireTutor relationships")
            .satisfies(e -> assertThat(e.getAppUser()).as("check appUser").isEqualTo(actual.getAppUser()))
            .satisfies(e -> assertThat(e.getTutor()).as("check tutor").isEqualTo(actual.getTutor()));
    }
}
