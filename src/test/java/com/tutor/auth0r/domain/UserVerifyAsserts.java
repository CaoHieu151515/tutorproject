package com.tutor.auth0r.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserVerifyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserVerifyAllPropertiesEquals(UserVerify expected, UserVerify actual) {
        assertUserVerifyAutoGeneratedPropertiesEquals(expected, actual);
        assertUserVerifyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserVerifyAllUpdatablePropertiesEquals(UserVerify expected, UserVerify actual) {
        assertUserVerifyUpdatableFieldsEquals(expected, actual);
        assertUserVerifyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserVerifyAutoGeneratedPropertiesEquals(UserVerify expected, UserVerify actual) {
        assertThat(expected)
            .as("Verify UserVerify auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserVerifyUpdatableFieldsEquals(UserVerify expected, UserVerify actual) {
        assertThat(expected)
            .as("Verify UserVerify relevant properties")
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getSchool()).as("check school").isEqualTo(actual.getSchool()))
            .satisfies(e -> assertThat(e.getStudentID()).as("check studentID").isEqualTo(actual.getStudentID()))
            .satisfies(e -> assertThat(e.getMajor()).as("check major").isEqualTo(actual.getMajor()))
            .satisfies(e -> assertThat(e.getGraduationYear()).as("check graduationYear").isEqualTo(actual.getGraduationYear()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserVerifyUpdatableRelationshipsEquals(UserVerify expected, UserVerify actual) {
        assertThat(expected)
            .as("Verify UserVerify relationships")
            .satisfies(e -> assertThat(e.getIdentityCard()).as("check identityCard").isEqualTo(actual.getIdentityCard()));
    }
}
