package com.tutor.auth0r.domain;

import static com.tutor.auth0r.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TutorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTutorAllPropertiesEquals(Tutor expected, Tutor actual) {
        assertTutorAutoGeneratedPropertiesEquals(expected, actual);
        assertTutorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTutorAllUpdatablePropertiesEquals(Tutor expected, Tutor actual) {
        assertTutorUpdatableFieldsEquals(expected, actual);
        assertTutorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTutorAutoGeneratedPropertiesEquals(Tutor expected, Tutor actual) {
        assertThat(expected)
            .as("Verify Tutor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTutorUpdatableFieldsEquals(Tutor expected, Tutor actual) {
        assertThat(expected)
            .as("Verify Tutor relevant properties")
            .satisfies(e -> assertThat(e.getRecommend()).as("check recommend").isEqualTo(actual.getRecommend()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getTuDevice()).as("check tuDevice").isEqualTo(actual.getTuDevice()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getFollowerCount()).as("check followerCount").isEqualTo(actual.getFollowerCount()))
            .satisfies(
                e ->
                    assertThat(e.getAverageRating())
                        .as("check averageRating")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAverageRating())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTutorUpdatableRelationshipsEquals(Tutor expected, Tutor actual) {
        assertThat(expected)
            .as("Verify Tutor relationships")
            .satisfies(e -> assertThat(e.getTutorDetails()).as("check tutorDetails").isEqualTo(actual.getTutorDetails()));
    }
}
